/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type MicrosoftAdaptiveCardSchema = AdaptiveCard;
export type Action = ActionSubmit | ActionShowCard | ActionOpenUrl;
/**
 * Displays text, allowing control over font sizes, weight, and color.
 */
export type TextBlock = CardElement;
/**
 * Controls the amount of spacing between this element and the preceding element.
 */
export type SpacingStyle =
  | 'none'
  | 'small'
  | 'default'
  | 'medium'
  | 'large'
  | 'extraLarge'
  | 'padding';
/**
 * Displays a media player for audio or video content.
 */
export type Media = CardElement;
/**
 * Displays an image.
 */
export type Image = CardElement;
/**
 * Containers group items together.
 */
export type Container = CardElement;
/**
 * ColumnSet divides a region into Columns, allowing elements to sit side-by-side.
 */
export type ColumnSet = CardElement;
/**
 * The FactSet element displays a series of facts (i.e. name/value pairs) in a tabular form.
 */
export type FactSet = CardElement;
/**
 * The ImageSet displays a collection of Images similar to a gallery.
 */
export type ImageSet = CardElement;
/**
 * Lets a user enter text.
 */
export type InputText = CardElement;
/**
 * Allows a user to enter a number.
 */
export type InputNumber = CardElement;
/**
 * Lets a user choose a date.
 */
export type InputDate = CardElement;
/**
 * Lets a user select a time.
 */
export type InputTime = CardElement;
/**
 * Lets a user choose between two options.
 */
export type InputToggle = CardElement;
/**
 * Allows a user to input a Choice.
 */
export type InputChoiceSet = CardElement;

/**
 * Root element in an Adaptive Card.
 */
export interface AdaptiveCard {
  /**
   * Must be `"AdaptiveCard"`.
   */
  type: 'AdaptiveCard';
  /**
   * The Actions to show in the card's action bar.
   */
  actions?: Action[];
  /**
   * The card elements to show in the primary card region.
   */
  body?:
    | []
    | [
        (
          | TextBlock
          | Media
          | Image
          | Container
          | ColumnSet
          | FactSet
          | ImageSet
          | InputText
          | InputNumber
          | InputDate
          | InputTime
          | InputToggle
          | InputChoiceSet
        ),
        ...unknown[]
      ];
  /**
   * An Action that will be invoked when the card is tapped or selected. `Action.ShowCard` is not supported.
   */
  selectAction?: ActionSubmit | ActionOpenUrl;
  id: string;
  [k: string]: unknown;
}

/**
 * Gathers input fields, merges with optional data field, and sends an event to the client. It is up to the client to determine how this data is processed. For example: With BotFramework bots, the client would send an activity through the messaging medium to the bot.
 */
export interface ActionSubmit {
  /**
   * Must be `"Action.Submit"`.
   */
  type: string;
  /**
   * Label for button or link that represents this action.
   */
  title?: string;
  /**
   * Optional icon to be shown on the action in conjunction with the title
   */
  iconUrl?: string;
  /**
   * Initial data that input fields will be combined with. These are essentially 'hidden' properties.
   */
  data?:
    | string
    | {
        [k: string]: unknown;
      };
  [k: string]: unknown;
}
/**
 * Defines an AdaptiveCard which is shown to the user when the button or link is clicked.
 */
export interface ActionShowCard {
  /**
   * Must be `"Action.ShowCard"`.
   */
  type: string;
  /**
   * Label for button or link that represents this action.
   */
  title?: string;
  /**
   * Optional icon to be shown on the action in conjunction with the title
   */
  iconUrl?: string;
  card: AdaptiveCard;
  [k: string]: unknown;
}
/**
 * When invoked, show the given url either by launching it in an external web browser or showing in-situ with embedded web browser.
 */
export interface ActionOpenUrl {
  /**
   * Must be `"Action.OpenUrl"`.
   */
  type: string;
  /**
   * Label for button or link that represents this action.
   */
  title?: string;
  /**
   * Optional icon to be shown on the action in conjunction with the title
   */
  iconUrl?: string;
  /**
   * The URL to open.
   */
  url: string;
  [k: string]: unknown;
}
export interface CardElement {
  type: string;
  /**
   * A unique identifier associated with the element.
   */
  id?: string;
  spacing?: SpacingStyle;
  /**
   * When `true`, draw a separating line at the top of the element.
   */
  separator?: boolean;
  [k: string]: unknown;
}
